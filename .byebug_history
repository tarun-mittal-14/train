n
train
value
key 
train.source == source && train.destination == destination
destination
source
train.source == source
trains
key
c
n
c
n
c
value
key
c
value.source
value
key
n
c
n
trains.each do |key, value|
        puts key
        puts value
        puts value.source 
        puts value.destination
        puts source 
        puts destination
      end
value
trains
value.source
n
c
n
trains.each do |key, value| 
trains
trains.each do |key, value|
n
c
n
c
trains.empty?
c
 trains.each do |key, value|
        if value.source == source && value.destination == destination
          puts "matched"
        end
      end
trains
c
n
c
n
trains.empty?
n
c
trains.each do |key, value|
        puts value.source
        puts value.destination
        puts source 
        puts destination
        if value.source == source && value.destination == destination
          puts "matched"
        else
          return true
        end
      end
trains.each do |key, value|
        puts value
        puts key 
        puts value.source
        puts value.destination
        puts source 
        puts destination
        if value.source == source && value.destination == destination
          puts "matched"
        else
          puts "not"
        end
      end
 trains.each do |key, value|
        puts value
        puts key 
        puts value.source
        puts value.destination
        puts source 
        puts destination
      end
 trains.each do |key, value|
        puts value
        puts key 
        puts value.source
        puts value.destination
      puts source
 trains.each do |key, value|
        puts value
        puts key 
        puts value.source
        puts value.destination
      end
value.source
 trains.each do |key, value|
        if value.source == source && value.destination == search_by_destination
          return true
        end
      end
n
trains.empty?
n
c
trains.empty?
n
c
trains[:name]
trains[:destination]
trains.source
trains
c
n
r3
n
trains.has_value?(source) && trains.has_value?(destination)
n
c
puts "hello" if trains.has_value?(source) && trains.has_value?(destination)
return true if trains.has_value?(source) && trains.has_value?(destination)
destination
trains.has_value?(destination)
trains.has_value?(source)
trains
train[:source] == source
train.source == source
trains.each_value do |train|
       if train.source == source && train.destination == destination
        return true
       end
     end
trains.each_value do |train|
   49:        if train.source == source && train.destination == destination
   50:         return true
   51:        end
   52:      end
trains
n
c
n
 trains.each_value {|train| true if train.source == source && train.destination == destination}
trains.empty?
c
trains.empty?
c
trains.empty?
c
trains.empty?
trains
c
if trains != {}
c
new_train
c
 trains.each_value {|train| true if train.source == source && train.destination == destination}
c
trains.each_value {|train| puts "hello" if train.source != source && train.destination != destination}
trains.each_value {|train| puts "hello" if train.source == source && train.destination == destination}
trains.each_value {|t| puts t.source}
trains.each_value {|t| puts t}
trains
train[:source]
trains.each_value {|train| puts "hello" if train[:source] == source && train[:destination] == destination}
trains.each_value {|train| true if train[:source] == source && train[:destination] == destination}
trains
c
trains
c
trains.each_value {|train| true if train[:source] == source && train[:destination] == destination}
c
  trains.each_value {|train| puts "HELLO" if train[:source] == source && train[:destination] == destination}
n
c
trains.each_value {|train| puts "HELLO" if train[:source] == source && train[:destination] == destination}
c
 new_train = Train.new.create_train(trains)
exit
destination
trains.each_value {|train| puts "HELLO" if train[:source] == source && train[:destination] == destination}
train_exists?( trains, source, destination)
c
new_train
c
n
c
destination
hashh.each_value {|v|  if v.include?(source) && v.include?(destination)}
hashh
hashh[source + destination] = arr
arr << source << destination
exit
n
c
h
arr
h
h.each_value {|v|  if v.include?(source)}
h.each_value {|v|  if v.include?(source) && v.include?(destination)}
train_exists?( h,source, destination)
h[source + destination] = arr
arr << source << destination
arr
c
 arr << source << destination
arr
n
c
trains
c
new_train
n
c
n
destination
source
trains
c
 trains.each_value {|train| true if train[:source] == source && train[:destination] == destination}
n
df
Train.new.create_train(trains)
c
trains
trains.each_value do |train|
trains.each_value {|train| puts "hello" if train[:source] != source && train[:destination] != destination}
trains.each_value {|train| puts "hello" if train[:source] == source && train[:destination] == destination}
trains.each_value {|train| puts "hello" if train[:destination] == destination}
trains.each_value {|train| true if train[:destination] == destination}
trains.each_value {|train| true if train[:source] == source}
destination
source
trains
trains.each_value {|train| true if train[:source] == source && train[:destination] == destination}
c
params
trains
new_train
c
destination
source
trains
TRAINS
c
train[1].destination
train[1].source
destination
